public void fetchDataFromDynamoAndSaveToElasticSearch(Long orgId) {
        logger.info("Migration Started for the org : {}", orgId);
        if (orgId != 432439L) {
            long startTime = System.currentTimeMillis();

            ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor();
            List<DynamoElasticSearchField> fieldList = dynamoDBRepository.getFieldsFromDynamoWithPagination(orgId);
            List<List<DynamoElasticSearchField>> fieldPartitionList = Lists.partition(fieldList, 1000);
            saveFieldsWithBulkApi(fieldPartitionList, executorService);

            long endTime = System.currentTimeMillis();
            logger.info("Migration Ended for the org : {}", orgId);
            logger.info("Total time taken in migration : {} for the orgId : {}", (endTime - startTime) / 1000, orgId);
        }
    }

private void saveFieldsWithBulkApi(List<List<DynamoElasticSearchField>> fieldPartitionList, ExecutorService executorService) {
        List<CompletableFuture<Void>> futures = fieldPartitionList.stream()
                .map(fieldSubList -> CompletableFuture.runAsync(() -> {
                    try {
                        saveEachPartitionInBulkToElasticSearch(fieldSubList);
                        Thread.sleep(1000);
                    } catch (IOException | InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }, executorService))
                .collect(toList());

        // Wait for all tasks to complete
        CompletableFuture<Void> completableFutureList = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
        completableFutureList.join();
    }

// One example of type safety
List<String> names = List.of("Alice", "Bob");
String[] arr = names.toArray(new String[0]); // Returns String[]

// Completable Future is best for asynchronous workflows and chaining tasks.

// CompletableFuture Example (Non-blocking, Asynchronous Callbacks)
import java.util.concurrent.CompletableFuture;

public class CompletableFutureExample {
    public static void main(String[] args) {
        System.out.println("Fetching user data...");

        // Asynchronous Task
        CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
            sleep(2000); // Simulate delay
            return "User: John Doe";
        });

        // Process result asynchronously
        future.thenAccept(result -> System.out.println("Result: " + result));

        System.out.println("Doing other work while waiting...");

        sleep(3000); // Keep main thread alive
    }

    static void sleep(int ms) {
        try { Thread.sleep(ms); } catch (InterruptedException e) { e.printStackTrace(); }
    }
}

// ExecutorService Example (Blocking, Manual Control)
import java.util.concurrent.*;

public class ExecutorServiceExample {
    public static void main(String[] args) {
        System.out.println("Fetching user data...");

        // Create a thread pool
        ExecutorService executor = Executors.newFixedThreadPool(2);

        // Submit task and get Future
        Future<String> future = executor.submit(() -> {
            sleep(2000); // Simulate delay
            return "User: John Doe";
        });

        System.out.println("Doing other work while waiting...");

        try {
            String result = future.get(); // BLOCKS main thread here!
            System.out.println("Result: " + result);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        executor.shutdown();
    }

    static void sleep(int ms) {
        try { Thread.sleep(ms); } catch (InterruptedException e) { e.printStackTrace(); }
    }
}


✔ Use CompletableFuture when you need non-blocking async execution with callbacks, chaining, and parallel execution.
✔ Use ExecutorService when you need manual control over thread pools and traditional task execution.

// Key Notes

No, when you create a thread using Thread or Runnable, it is NOT managed by ForkJoinPool. Instead, it runs as an independent thread, managed by the JVM's default thread scheduler.

ForkJoinPool.commonPool() is Java's default thread pool for async tasks.

## Key Points

Q: How does Java by default handle thread management ?

Java handles thread management using the Java Virtual Machine (JVM) and the underlying operating system's native threads, managed by JVM default thread scheduler. 
  - When you create a new thread in Java (e.g., by extending Thread or implementing Runnable), you're asking the JVM to create a new native thread via the OS.
  - Java uses preemptive multitasking, where the OS decides which thread runs and when.
  - Thread scheduling is handled by the OS, not Java itself.
  - The JVM maps Java threads to native threads and relies on the OS’s scheduler to manage time slices and CPU allocation.

Java encourages using Executors for thread management rather than creating threads manually.
 - The Executors framework provides:
     * Thread pools
     * Task scheduling
     * Reuse of worker threads
This approach avoids the overhead of creating too many threads.

Q: Executors service also create native os threads ? 
        Yes — ExecutorService ultimately uses native OS threads, just like when you create threads manually with new Thread().

Q: What is the benefit of executors and java default thread management when both are using native threads only ?

Yes, both use native threads, but the benefits of ExecutorService come from how it manages and organizes them — not from the thread type itself.

Feature                                	new Thread()	                                ExecutorService
Thread reuse	                     ❌ New thread each time	                ✅ Reuses threads via pool
Performance	                     ❌ High overhead if many threads	        ✅ Efficient due to pooling
Task queueing	                     ❌ You manage it	                        ✅ Built-in queue
Scalability	                     ❌ Risk of thread explosion	        ✅ Controlled thread pool size
Lifecycle mgmt	                     ❌ Hard to shut down cleanly	        ✅ shutdown() / awaitTermination()
Advanced scheduling	             ❌ Manual	                                ✅ Built-in (ScheduledExecutorService)
Customization	                     ❌ Basic	                                ✅ Custom ThreadFactory, RejectedExecutionHandler, etc.

Q: Why Raw Threads are risky and how executor service fixes it ?

That creates 1000 native threads, which:
        Is expensive (memory + context switching)
        Can cause OutOfMemoryError or performance issues
        Gives you no control over concurrency limits

        Only 10 threads are active at once.
        Tasks are queued and executed efficiently.
        Much better resource control, and predictable behavior.

Q: If my cpu is octa core, can it create more than 8 threads ?

You can create hundreds or thousands of threads, but only up to 8 threads can run simultaneously on an 8-core CPU (assuming 1 thread per core, and ignoring hyper-threading for now).
The OS time-slices the CPU cores:
        It rapidly switches between threads to simulate parallelism.
        Unused threads wait in the ready queue or are blocked.

Q: Plz explain forkJoinPool.

It provides tools to help speed up parallel processing by attempting to use all available processor cores. It accomplishes this through a divide and conquer approach.
In practice, this means that the framework first “forks,” recursively breaking the task into smaller independent subtasks until they are simple enough to run asynchronously.
After that, the “join” part begins. The results of all subtasks are recursively joined into a single result. In the case of a task that returns void, the program simply waits until every subtask runs.
To provide effective parallel execution, the fork/join framework uses a pool of threads called the ForkJoinPool. This pool manages worker threads of type ForkJoinWorkerThread.
It is generally used in parallel streams and recursive tasks.

Feature	                                        Benefit
Work stealing	                Idle threads "steal" tasks from others, improving load balance
Efficient CPU usage	        Perfect for multi-core CPUs
Lightweight threads	        Uses fewer threads than ExecutorService for same throughput in CPU-bound work
Common pool	                Default shared pool used in parallel streams and CompletableFuture

Q: What is the benefit that we get when we use executors with completablefuture ?

When we do "CompletableFuture.runAsync(() -> doWork());"
Java runs it using the common ForkJoinPool — same one used by parallelStream().

But when we use executor service, then we decide:
        How many threads to use
        What kind of threads (daemon, priority, etc.)
        Which tasks get isolated resources
CompletableFuture.runAsync(() -> doWork(), executor);

ForkJoinPool.commonPool() is shared — if you flood it with tasks, you could:
        Starve other parts of your app (like parallel streams)
        Get poor performance due to overload
        Custom executor = isolated and safe.

Virtual Threads :

Virtual threads (introduced in Java 21 as a stable feature, part of Project Loom) are lightweight threads managed by the Java Virtual Machine (JVM), not by the OS.
        - They are much cheaper than traditional threads.
        - You can create millions of virtual threads without killing performance or memory.

## Semaphore Example

// UserService.java
@Service
public class UserService {

    private final UserRepository userRepository;

    // Allow only 3 threads at a time
    private final Semaphore semaphore = new Semaphore(3);

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> getAllUsers() {
        try {
            semaphore.acquire(); // Acquire permit
            System.out.println("Thread " + Thread.currentThread().getName() + " acquired permit");

            // Simulate DB delay
            Thread.sleep(1000);

            return userRepository.findAll();

        } catch (InterruptedException e) {
            throw new RuntimeException("Thread interrupted", e);
        } finally {
            semaphore.release(); // Always release
            System.out.println("Thread " + Thread.currentThread().getName() + " released permit");
        }
    }
}

** Exception Handling using Completable Future

import java.util.concurrent.CompletableFuture;

public class ExceptionallyExample {
    public static void main(String[] args) {
        CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
            if (true) throw new RuntimeException("Something went wrong!");
            return "Success";
        }).exceptionally(ex -> {
            System.out.println("Handled: " + ex.getMessage());
            return "Fallback value";
        });

        System.out.println("Result: " + future.join()); // Output: Fallback value
    }
}

import java.util.concurrent.CompletableFuture;

public class HandleExample {
    public static void main(String[] args) {
        CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
            if (true) throw new RuntimeException("Failure in task");
            return "OK";
        }).handle((result, ex) -> {
            if (ex != null) {
                System.out.println("Handled error: " + ex.getMessage());
                return "Recovered in handle";
            } else {
                return result;
            }
        });

        System.out.println("Result: " + future.join()); // Output: Recovered in handle
    }
}


